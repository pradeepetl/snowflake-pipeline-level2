name: Deploy AWS Glue Job

on:
  push:
    branches:
      - dev  # Trigger the action on push to the main branch, adjust as needed
env:
  SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT_DEV }}
  SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER_DEV }}
  SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD_DEV }}
  SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE_DEV }}
  SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE_DEV }}
  SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE_DEV }}
  SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA_DEV }}
  SNOWFLAKE_CONNECTIONS_MYCONNECTION_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD_DEV }}
  SNOWFLAKE_CONNECTIONS_MYCONNECTION_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT_DEV }}
  SNOWFLAKE_CONNECTIONS_MYCONNECTION_USER: ${{ secrets.SNOWFLAKE_USER_DEV }}
  SNOWFLAKE_CONNECTIONS_MYCONNECTION_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE_DEV }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the repository
    - name: Checkout repository
      uses: actions/checkout@v2

    # Step 2: Set up AWS CLI
    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    # Step 3: Install dependencies (if needed)
    - name: Install dependencies
      run: |
        pip install awscli


    # Step 4: Deploy CloudFormation stack (Create or Update)
    # - name: Deploy CloudFormation stack
    #   run: |
    #     TEMPLATE_FILE="./template.yml"
    #     aws cloudformation create-stack \
    #       --stack-name github-action-aws-stack \
    #       --template-body file://$TEMPLATE_FILE \
    #       --capabilities CAPABILITY_IAM \
    #       --region ${{ secrets.AWS_DEFAULT_REGION }}
          
    #     aws s3 cp ./api_to_s3/fetch_from_api_to_s3.py s3://mys3bucket068/scripts/fetch_from_api_to_s3.py

    - name: Setup AWS SAM
      uses: aws-actions/setup-sam@v2

    - name: Run AWS SAM Build
      run: sam build --use-container --template-file template.yml

    - name: sam package
      #run: sam package --template-file .aws-sam/build/template.yaml --s3-bucket ${{env.S3_BUCKET}} --output-template-file template.yml --kms-key-id alias/aws/s3
      run: sam package --template-file .aws-sam/build/template.yaml --s3-bucket mys3bucket068 --output-template-file template.yml --kms-key-id alias/aws/s3
    
    - name: Deploy to AWS Cloudformation
      uses: aws-actions/aws-cloudformation-github-deploy@v1
      with:
        #name: pipeline-${{github.event.repository.name}}-deployment
        name: github-action-aws-stack
        template: ./template.yml
        #parameter-overrides : file://${{ github.workspace }}/params.${{ env.DEPLOYMENT_EVN }}.json
        changeset: --change-set-name
        capabilities: CAPABILITY_IAM, CAPABILITY_AUTO_EXPAND,CAPABILITY_NAMED_IAM
        no-fail-on-empty-changeset: "1"

    - name: copy glue script
      run: |
        aws s3 cp ./api_to_s3/fetch_from_api_to_s3.py s3://mys3bucket068/scripts/fetch_from_api_to_s3.py

    # Optional: Verify deployment
    - name: Verify deployment
      run: |
        aws cloudformation describe-stacks --stack-name github-action-aws-stack
    
          
    - name: Setup Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install Python packages
      run: pip install -r requirements.txt
      

    - name: Setup snowcli
      uses: Snowflake-Labs/snowflake-cli-action@v1.5
      with:
        cli-version: "latest"
        default-config-file-path: "config.toml"
      
    - name: Deploy Snowpark apps
      working-directory: DE_PROJECT_1
      env:
        SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT_DEV }}
        SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER_DEV }}
        SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD_DEV }}
        SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE_DEV }}
        SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE_DEV }}
        SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE_DEV }}
      run: python deploy_snowpark_app.py $GITHUB_WORKSPACE/DE_PROJECT_1
      
    - name: Deploy Snowpark tasks
      env:
        SNOWFLAKE_ACCOUNT: ${{ secrets.SNOWFLAKE_ACCOUNT_DEV }}
        SNOWFLAKE_USER: ${{ secrets.SNOWFLAKE_USER_DEV }}
        SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD_DEV }}
        SNOWFLAKE_ROLE: ${{ secrets.SNOWFLAKE_ROLE_DEV }}
        SNOWFLAKE_WAREHOUSE: ${{ secrets.SNOWFLAKE_WAREHOUSE_DEV }}
        SNOWFLAKE_DATABASE: ${{ secrets.SNOWFLAKE_DATABASE_DEV }}
        SNOWFLAKE_SCHEMA: ${{ secrets.SNOWFLAKE_SCHEMA_DEV }}
      working-directory: DE_PROJECT_1/app
      run: python create_task.py

    - name: copy sql file
      working-directory: DE_PROJECT_1/app
      run: snow stage copy load_to_emp_tgt.sql @dev_deployment/de_project_1/